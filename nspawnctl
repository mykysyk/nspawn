#!/bin/bash
#----------------------------------------------------------
#  machinectl(Control the systemd machine manager) で一部コマンドが効かないので
#  暫定的に machinectl をラップしたものです。
#  バグフィックスされたらこのコマンドは永久に葬ってください。
# http://fedoraproject.org/wiki/Features/SystemdLightweightContainers
# http://kumar-pravin.blogspot.jp/2015/02/create-lightweight-containers-using.html
#----------------------------------------------------------
# CONFIG
#----------------------------------------------------------
MACHINECTL_COMMAND=/bin/machinectl
CONTAINDER_DIR=/var/lib/machines
OVERLAYFS__DIR=/var/lib/nspawn/overlay
TRASH_DIR=/var/lib/nspawn/_trash

GLOBAL_UNIT_FILE="/usr/lib/systemd/system/systemd-nspawn@.service"
LOCAL_UNIT_FILE="/etc/systemd/system/systemd-nspawn@.service"

OK="\033[0;32mOK\033[0m"
NG="\033[0;31mNG\033[0m"

#----------------------------------------------------------
# ブリッジ設定有無
#----------------------------------------------------------
#BRIDGE_NAME=""             # ブリッジ無：ネットワークをホスト機と共有させる場合
BRIDGE_NAME="br-int"        # ブリッジ有：ブリッジ機能を利用する場合のデフォルトブリッジを指定
if [ -n "${BRIDGE_NAME}" ]
then
    EXEC_NSPAWN="ExecStart=/usr/bin/systemd-nspawn --quiet --boot --network-bridge=${BRIDGE_NAME} --machine=%I"
else
    EXEC_NSPAWN="ExecStart=/usr/bin/systemd-nspawn --quiet --boot --machine=%I"
fi
 
#----------------------------------------------------------
# MAIN
#----------------------------------------------------------
function main(){

    local COMMAND_TYPE=$1

    case ${COMMAND_TYPE} in
    
        list)
            machinectl_list
            ;;
        start)
            shift
            machinectl_start ${@}
            ;;
        login)
            shift
            machinectl_login ${@}
            ;;
        poweroff)
            shift
            machinectl_poweroff ${@}
            ;;
        remove)
            shift
            machinectl_remove ${@}
            ;;
        copy-to)
	        shift
            machinectl_copy_to ${@}
            ;;
        overlay-to)
            shift
            machinectl_overlayfs_clone ${@}
            ;;
        --help|-h|help)
            usage
            ;;
        '')
            usage
            ;;
        *)
            ${MACHINECTL_COMMAND} ${@}
            ;;
    esac
    
}

#----------------------------------------------------------
# USAGE
#----------------------------------------------------------
function usage(){

    ${MACHINECTL_COMMAND} --help 
    
    echo ""
    echo "----------------------------------------------------------"
    echo " [使い方]"
    echo "  machinectlの下記オプションだけをラップしています。"
    echo "----------------------------------------------------------"
    echo "  $0 list               : コンテナ状況を表示"
    echo "  $0 start      NAME    : コンテナを起動"
    echo "  $0 login      NAME    : コンテナへコンソール接続"
    echo "  $0 poweroff   NAME    : コンテナを停止"
    echo "  $0 remove     NAME    : コンテナを削除"
    echo "  $0 copy-to    SRC DST : コンテナマスタを元にコンテナを新規作成"
    echo "  $0 overlay-to SRC DST : コンテナマスタを元にOverlayFSでコンテナを新規作成"
    echo "----------------------------------------------------------"
    echo "  その他のオプションは machinectl コマンドと同じです"  
    echo ""
    echo ""
    echo "  ※注意 1 ※"
    echo "    machinectl login した状態で コンテナ側からシャットダウンやリブートを実行すると"
    echo "    デッドロック状態になり画面が固まりますので注意してください。"
    echo "    シャットダウンやリブートはssh接続等を経由して実施してください。"
    echo ""
    echo "  ※注意 2 ※"
    echo "    machinectl overlay-to は検証レベルまでにしてください。動作保障しません。"
    echo ""
    echo "----------------------------------------------------------"
}

#----------------------------------------------------------
# START
#----------------------------------------------------------
function machinectl_start(){

    CONTAINER_NAME=$1
    #----------------------------------------------------------
    # 変数
    #----------------------------------------------------------
    local LOWERDIR=${CONTAINDER_DIR}/${CONTAINER_NAME}
    local UPPERDIR=${OVERLAYFS__DIR}/${CONTAINER_NAME}/upper
    local WORKDIR_=${OVERLAYFS__DIR}/${CONTAINER_NAME}/work
    local OVERLAY_=${CONTAINDER_DIR}/${CONTAINER_NAME}

    #----------------------------------------------------------
    # 引数チェック
    #----------------------------------------------------------
    if [ -z ${CONTAINER_NAME} ]
    then
        echo -e "${NG} CONTAINER_NAME is NULL"
        exit 1
    fi

    #----------------------------------------------------------
    # 起動確認
    #----------------------------------------------------------
    if ! ${MACHINECTL_COMMAND} show ${CONTAINER_NAME} > /dev/null 2>&1
    then
        echo -e "${OK} ${MACHINECTL_COMMAND} show ${CONTAINER_NAME}"
    else
        echo -e "${NG} ${CONTAINER_NAME} is already running"
        exit 1
    fi

    #----------------------------------------------------------
    # bridge 確認 
    #----------------------------------------------------------
    if [ -n "${BRIDGE_NAME}" ]
    then
        if  brctl show | grep ${BRIDGE_NAME} > /dev/null 2>&1
        then
            echo -e "${OK} BRIDGE ${BRIDGE_NAME} is found"
        else
            echo -e "${NG} BRIDGE ${BRIDGE_NAME} is not found (brctl show)"
            exit 1
        fi
    else
        echo -e "${OK} 仮想インスタンスのネットワークはホスト機と共有します"
    fi
    
    #----------------------------------------------------------
    # unitファイル生成
    #----------------------------------------------------------
    if [ ! -f  ${LOCAL_UNIT_FILE} ]
    then
        cp ${GLOBAL_UNIT_FILE} ${LOCAL_UNIT_FILE}
        sed -i \
            -e "s|^ExecStart=.*|${EXEC_NSPAWN}|g" \
               ${LOCAL_UNIT_FILE}
        echo -e "${OK} ${LOCAL_UNIT_FILE} was created"
    fi

    #----------------------------------------------------------
    # 起動unitファイル調査
    #----------------------------------------------------------
    if [ -f "/etc/systemd/system/machines.target.wants/systemd-nspawn@${CONTAINER_NAME}.service" ]
    then
        local UNIT_FILE="/etc/systemd/system/machines.target.wants/systemd-nspawn@${CONTAINER_NAME}.service"
    elif [ -f "${LOCAL_UNIT_FILE}" ]
    then
        local UNIT_FILE="${LOCAL_UNIT_FILE}"
    elif [ -f "${GLOBAL_UNIT_FILE}" ]
    then
        local UNIT_FILE="${GLOBAL_UNIT_FILE}"
    fi

    echo -e "${OK} ${UNIT_FILE}"
    echo -e "${OK} $(egrep '^ExecStart' ${UNIT_FILE})"
    #----------------------------------------------------------
    # OverlayFSの使用有無確認
    #----------------------------------------------------------
    if [ -d "${OVERLAYFS__DIR}/${CONTAINER_NAME}" ]
    then
        #----------------------------------------------------------
        #  OverlayFSの使用時：マウントされているか確認
        #----------------------------------------------------------
        if ! mountpoint ${CONTAINDER_DIR}/${DST_CONTAINER_NAME} > /dev/null 2>&1 
        then
            #----------------------------------------------------------
            #  OverlayFSがマウントされていなかればマウントする
            #----------------------------------------------------------
            if mount -t overlay -o lowerdir=${LOWERDIR},upperdir=${UPPERDIR},workdir=${WORKDIR_} overlay ${OVERLAY_}
            then
                echo -e "${OK} mount -t overlay -o lowerdir=${LOWERDIR},upperdir=${UPPERDIR},workdir=${WORKDIR_} overlay ${OVERLAY_}"
            else
                echo -e "${NG} mount -t overlay -o lowerdir=${LOWERDIR},upperdir=${UPPERDIR},workdir=${WORKDIR_} overlay ${OVERLAY_}"
                exit 1
            fi
        fi
    fi
    
    #----------------------------------------------------------
    # 起動
    #----------------------------------------------------------
    if ${MACHINECTL_COMMAND} start ${CONTAINER_NAME} 
    then
        echo -e "${OK} ${MACHINECTL_COMMAND} start ${CONTAINER_NAME}"
    else
        echo -e "${NG} ${MACHINECTL_COMMAND} start ${CONTAINER_NAME}"
        systemctl status systemd-nspawn@${CONTAINER_NAME}.service
        exit 1
    fi

    echo "----------------------------------------------------------"
    ${MACHINECTL_COMMAND} list
    echo ""
    echo "$0 login ${CONTAINER_NAME}"
    echo ""
}

#----------------------------------------------------------
# LIST CONTAINER
#----------------------------------------------------------
function machinectl_list(){
    
    echo "---------------------------"
    echo " running container"
    echo "---------------------------"
    ${MACHINECTL_COMMAND} list
    echo "---------------------------"
    echo " stopping container"
    echo "---------------------------"

    cd ${CONTAINDER_DIR}/
    for LS_CONTAINER in $(ls -1 | egrep -v "^_master-")
    do
        if ! ${MACHINECTL_COMMAND} status ${LS_CONTAINER} > /dev/null 2>&1
        then
            echo  "$LS_CONTAINER"
        fi
    done
    echo "---------------------------"
    echo " overlayfs master container"
    echo "---------------------------"
    cd ${CONTAINDER_DIR}/
    ls -1 | egrep "^_master-"

}

#----------------------------------------------------------
# REMOVE
#----------------------------------------------------------
function machinectl_remove(){

    CONTAINER_NAME=$1

    #----------------------------------------------------------
    # 引数チェック
    #----------------------------------------------------------
    if [ -z ${CONTAINER_NAME} ]
    then
        echo -e "${NG} CONTAINER_NAME is NULL"
        exit 1
    fi
    
    #----------------------------------------------------------
    # 起動確認
    #----------------------------------------------------------
    if ${MACHINECTL_COMMAND} show ${CONTAINER_NAME} > /dev/null 2>&1
    then
        echo -e "${NG} ${CONTAINER_NAME} is running"
        exit 1
    fi

    #----------------------------------------------------------
    # 削除確認 
    #----------------------------------------------------------
    read -p "remove container ${CONTAINER_NAME} (Type YES or no) : " YESNO
    case ${YESNO} in
        YES)
            echo -e "${OK} just wait 10 seconds"
            sleep 10
            ;;
        *)
            echo -e "${NG} remove cancel"
            exit 1
            ;;
    esac
        
    #----------------------------------------------------------
    # 変数
    #----------------------------------------------------------
    local ROOTDIRECTORY=${CONTAINDER_DIR}/${CONTAINER_NAME}
    local TRASH_DIR=${TRASH_DIR}/${CONTAINER_NAME}_`date +"%Y%m%d_%H%M"`
    local LOWERDIR=${CONTAINDER_DIR}/${CONTAINER_NAME}
    local UPPERDIR=${OVERLAYFS__DIR}/${CONTAINER_NAME}/upper
    local WORKDIR_=${OVERLAYFS__DIR}/${CONTAINER_NAME}/work
    local OVERLAY_=${CONTAINDER_DIR}/${CONTAINER_NAME}

    #----------------------------------------------------------
    # ゴミ箱削除用TEMPWACH登録
    #----------------------------------------------------------
    mkdir -p ${TRASH_DIR}
    if [ -f /etc/cron.d/systemd-nspawn ]
    then
        echo -e "${OK} /etc/cron.d/systemd-nspawn"
    else
        
        echo "5 4 * * * root /usr/sbin/tmpwatch -umc 336 ${TRASH_DIR}" >> /etc/cron.d/systemd-nspawn
        chmod 755 /etc/cron.d/systemd-nspawn
    fi

    if [ -e /etc/cron.d/systemd-nspawn ]
    then
        echo -e "${OK} create /etc/cron.d/systemd-nspawn"
    fi

    #----------------------------------------------------------
    # OverlayFS マウント確認
    #----------------------------------------------------------
    if mountpoint ${ROOTDIRECTORY} > /dev/null 2>&1
    then
        #----------------------------------------------------------
        # OverlayFS アンマウント
        #----------------------------------------------------------
        if umount ${ROOTDIRECTORY} > /dev/null 2>&1
        then
            echo -e "${OK} unmount ${ROOTDIRECTORY}"
        else
            echo -e "${NG} unmount ${ROOTDIRECTORY}"
            exit 1
        fi
    else
        echo -e "${OK} OverlayFS not used ${ROOTDIRECTORY}"
    fi

    #----------------------------------------------------------
    # ゴミ箱にOverlayFSのディレクトリ移動 
    #----------------------------------------------------------
    if [ -d ${OVERLAYFS__DIR}/${CONTAINER_NAME} ]
    then
        if mv ${OVERLAYFS__DIR}/${CONTAINER_NAME} ${TRASH_DIR}/overlay
        then
            echo -e "${OK} mv ${OVERLAYFS__DIR}/${CONTAINER_NAME} ${TRASH_DIR}/overlay"
        else
            echo -e "${NG} mv ${OVERLAYFS__DIR}/${CONTAINER_NAME} ${TRASH_DIR}/overlay"
        fi
    fi

    #----------------------------------------------------------
    # ゴミ箱にコンテナのroot directoryを移動
    #----------------------------------------------------------
    sleep 3
    if mv ${ROOTDIRECTORY} ${TRASH_DIR}/root > /dev/null 2>&1
    then
        echo -e "${OK} mv ${ROOTDIRECTORY} ${TRASH_DIR}/root"
    else
        echo -e "${NG} mv ${ROOTDIRECTORY} ${TRASH_DIR}/root"
        exit 1
    fi
}

#----------------------------------------------------------
# POWEROFF
#----------------------------------------------------------
function machinectl_poweroff(){

    local CONTAINER_NAME=$1
    local PID=$(${MACHINECTL_COMMAND} show ${CONTAINER_NAME} | awk -F= '/Leader/{print $2}')

    [ -z ${PID} ] && exit 0

    #----------------------------------------------------------
    # 停止確認
    #----------------------------------------------------------
    read -p "poweroff container ${CONTAINER_NAME} (Type YES or no) : " YESNO
    case ${YESNO} in
        YES)
            if kill -9 ${PID}
            then
                echo -e "${OK} kill -9 ${PID}"
            else
                echo -e "${NG} kill -9 ${PID}"
            fi
            ;;
        *)
            echo "Please retype [YES] or [no]"
            echo -e "${NG} poweroff cancel"
            exit 1
            ;;
    esac

}

#----------------------------------------------------------
# LOGIN
#----------------------------------------------------------
function machinectl_login(){

    local CONTAINER_NAME=$1
    local PID=$(${MACHINECTL_COMMAND} show ${CONTAINER_NAME} | awk -F= '/Leader/{print $2}')

    export SHELL=/bin/bash
    nsenter --mount --uts --ipc --net --pid --target ${PID}

}

#----------------------------------------------------------
# CopyTo
#----------------------------------------------------------
function machinectl_copy_to(){

    local SRC_CONTAINER_NAME=$1
    local DST_CONTAINER_NAME=$2

    #----------------------------------------------------------
    # ホスト名の文字数確認
    #----------------------------------------------------------
    if [ ${#DST_CONTAINER_NAME} -gt 11 ]
    then
        echo -e "${NG} ホスト名 ${DST_CONTAINER_NAME} は11文字以内で指定してください(ホスト名はvethで利用されます)"
        exit 1
    fi

    #----------------------------------------------------------
    # コピー先がすでに利用されているか確認
    #----------------------------------------------------------
    if [ ! -d "${CONTAINDER_DIR}/${DST_CONTAINER_NAME}" ]
    then
        echo -e "${OK} ${CONTAINDER_DIR}/${DST_CONTAINER_NAME} is not exist"
    else
        echo -e "${NG} ${CONTAINDER_DIR}/${DST_CONTAINER_NAME} already exist"
        exit 1
    fi

    #----------------------------------------------------------
    # Copy処理
    #----------------------------------------------------------
    echo "cp -a ${CONTAINDER_DIR}/${SRC_CONTAINER_NAME} ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}"
    if cp -a "${CONTAINDER_DIR}/${SRC_CONTAINER_NAME}" "${CONTAINDER_DIR}/${DST_CONTAINER_NAME}"
    then
        echo -e "${OK} cp -a ${CONTAINDER_DIR}/${SRC_CONTAINER_NAME} ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}"
        local SRC_DU=$(du -sh "${CONTAINDER_DIR}/${SRC_CONTAINER_NAME}"|awk '{print $1}')
        local DST_DU=$(du -sh "${CONTAINDER_DIR}/${DST_CONTAINER_NAME}"|awk '{print $1}')
        if [ "${SRC_DU}" == "${DST_DU}" ]
        then
            echo -e "${OK} SRC:${SRC_DU} DST:${DST_DU}"
        else
            echo -e "${NG} SRC:${SRC_DU} DST:${DST_DU}"
        fi
    else
        echo -e "${NG} cp -a ${CONTAINDER_DIR}/${SRC_CONTAINER_NAME}" "${CONTAINDER_DIR}/${DST_CONTAINER_NAME}"
    fi

    #----------------------------------------------------------
    # /etc/sysconfig/network からホスト名削除
    #----------------------------------------------------------
    local NETWORK_FILE=${CONTAINDER_DIR}/${DST_CONTAINER_NAME}/etc/sysconfig/network
    if [ -f ${NETWORK_FILE} ]
    then
        sed -i '/^HOSTNAME=/d' ${NETWORK_FILE}
        echo -e "${OK} sed -i '/^HOSTNAME=/d' ${NETWORK_FILE}"
    fi

    #----------------------------------------------------------
    # ネットワークを変更する
    #----------------------------------------------------------
    local IFCFG_FILE=${CONTAINDER_DIR}/${DST_CONTAINER_NAME}/etc/sysconfig/network-scripts/ifcfg-host0
    if [ -f ${IFCFG_FILE} ]
    then
        local TODAY=$(date +%Y%h%m)
        local EDITOR=$0
        sed -i "1s/^/edit by ${EDITOR} ${TODAY}\n/" ${IFCFG_FILE}
        sed -i 's/^/# /g'                                    ${IFCFG_FILE}
        echo ""                                           >> ${IFCFG_FILE}
    else
        touch ${IFCFG_FILE}
    fi

    echo "# generated by $0" >> ${IFCFG_FILE}
    echo "DEVICE=host0"      >> ${IFCFG_FILE}
    echo "TYPE=Ethernet"     >> ${IFCFG_FILE}
    echo "ONBOOT=yes"        >> ${IFCFG_FILE}
    echo "BOOTPROTO=dhcp"    >> ${IFCFG_FILE}
    echo -e "${OK} ${IFCFG_FILE}"

    #----------------------------------------------------------
    # /etc/os-release
    #----------------------------------------------------------
    touch ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}/etc/os-release

    #----------------------------------------------------------
    # 起動
    #----------------------------------------------------------
    if ${MACHINECTL_COMMAND} start ${DST_CONTAINER_NAME}
    then
        echo -e "${OK} ${MACHINECTL_COMMAND} start ${DST_CONTAINER_NAME}"
    else
        echo -e "${NG} ${MACHINECTL_COMMAND} start ${DST_CONTAINER_NAME}"
        exit 1
    fi

    ${MACHINECTL_COMMAND} list
    echo ""
    echo "$0 login ${DST_CONTAINER_NAME}"
    echo ""

}
#----------------------------------------------------------
# OverlayFS 
#----------------------------------------------------------
function machinectl_overlayfs_clone(){

    local SRC_CONTAINER_NAME=$1
    local DST_CONTAINER_NAME=$2
    local LOWERDIR=${CONTAINDER_DIR}/${SRC_CONTAINER_NAME}
    local UPPERDIR=${OVERLAYFS__DIR}/${DST_CONTAINER_NAME}/upper
    local WORKDIR_=${OVERLAYFS__DIR}/${DST_CONTAINER_NAME}/work
    local OVERLAY_=${CONTAINDER_DIR}/${DST_CONTAINER_NAME}

    
    #----------------------------------------------------------
    # ホスト名の文字数確認
    #----------------------------------------------------------
    if [ ${#DST_CONTAINER_NAME} -gt 11 ]
    then
        echo -e "${NG} ホスト名 ${DST_CONTAINER_NAME} は11文字以内で指定してください(ホスト名はvethで利用されます)"
        exit 1
    fi

    #----------------------------------------------------------
    # マウントポイントがすでに利用されているか確認
    #----------------------------------------------------------
    if ! mountpoint ${CONTAINDER_DIR}/${DST_CONTAINER_NAME} > /dev/null 2>&1 
    then
        echo -e "${OK} mountpoint ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}"
    else
        echo -e "${NG} ${CONTAINDER_DIR}/${DST_CONTAINER_NAME} already exist"
        exit 1
    fi

    #----------------------------------------------------------
    # OverlayFS作業ディレクトリ作成
    #----------------------------------------------------------
    mkdir -p ${OVERLAYFS__DIR}
    if mkdir ${OVERLAYFS__DIR}/${DST_CONTAINER_NAME}
    then
        mkdir -p ${OVERLAYFS__DIR}/${DST_CONTAINER_NAME}/{upper,work}
        echo -e "${OK} mkdir ${OVERLAYFS__DIR}/${DST_CONTAINER_NAME}/{upper,work}"
    else
        echo -e "${NG} mkdir ${OVERLAYFS__DIR}/${DST_CONTAINER_NAME}"
        exit 1
    fi

    #----------------------------------------------------------
    # OverlayFS マウントポイント作成
    #----------------------------------------------------------
    if mkdir ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}
    then
        echo -e "${OK} mkdir ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}"
    else
        echo -e "${NG} mkdir ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}"
        exit 1
    fi

    #----------------------------------------------------------
    # OverlayFS マウント
    #----------------------------------------------------------
    if mount -t overlay -o lowerdir=${LOWERDIR},upperdir=${UPPERDIR},workdir=${WORKDIR_} overlay ${OVERLAY_}
    then
        echo -e "${OK} mount -t overlay -o lowerdir=${LOWERDIR},upperdir=${UPPERDIR},workdir=${WORKDIR_} overlay ${OVERLAY_}"
    else
        echo -e "${NG} mount -t overlay -o lowerdir=${LOWERDIR},upperdir=${UPPERDIR},workdir=${WORKDIR_} overlay ${OVERLAY_}"
        rmdir ${OVERLAYFS__DIR}/${DST_CONTAINER_NAME}/{upper,work}
        rmdir ${OVERLAYFS__DIR}/${DST_CONTAINER_NAME}
        rmdir ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}
        exit 1
    fi
    
    #----------------------------------------------------------
    # マウントポイントがすでに利用されているか確認
    #----------------------------------------------------------
    sleep 3
    if mountpoint ${CONTAINDER_DIR}/${DST_CONTAINER_NAME} > /dev/null 2>&1 
    then
        echo -e "${OK} ${CONTAINDER_DIR}/${DST_CONTAINER_NAME} mounted"
    else
        echo -e "${NG} ${CONTAINDER_DIR}/${DST_CONTAINER_NAME} not mounted"
        exit 1
    fi

    #----------------------------------------------------------
    # ホスト名削除
    #----------------------------------------------------------
    local NETWORK_FILE=${CONTAINDER_DIR}/${DST_CONTAINER_NAME}/etc/sysconfig/network
    if [ -f ${NETWORK_FILE} ]
    then
        sed -i '/^HOSTNAME=/d' ${NETWORK_FILE}
        echo -e "${OK} sed -i '/^HOSTNAME=/d' ${NETWORK_FILE}"
    fi

    #----------------------------------------------------------
    # ネットワークを変更する
    #----------------------------------------------------------
    local IFCFG_FILE=${CONTAINDER_DIR}/${DST_CONTAINER_NAME}/etc/sysconfig/network-scripts/ifcfg-host0
    if [ -f ${IFCFG_FILE} ]
    then
        sed -i 's/^/# /g'   ${IFCFG_FILE}
        echo ""          >> ${IFCFG_FILE}
    else
        touch ${IFCFG_FILE}
    fi

    echo "# generated by $0" >> ${IFCFG_FILE}
    echo "DEVICE=host0"      >> ${IFCFG_FILE}
    echo "TYPE=Ethernet"     >> ${IFCFG_FILE}
    echo "ONBOOT=yes"        >> ${IFCFG_FILE}
    echo "BOOTPROTO=dhcp"    >> ${IFCFG_FILE}
    echo -e "${OK} ${IFCFG_FILE}"

    #----------------------------------------------------------
    # /etc/os-release
    #----------------------------------------------------------
    touch ${CONTAINDER_DIR}/${DST_CONTAINER_NAME}/etc/os-release

    #----------------------------------------------------------
    # 起動
    #----------------------------------------------------------
    if ${MACHINECTL_COMMAND} start ${DST_CONTAINER_NAME}
    then
        echo -e "${OK} ${MACHINECTL_COMMAND} start ${DST_CONTAINER_NAME}"
    else
        echo -e "${NG} ${MACHINECTL_COMMAND} start ${DST_CONTAINER_NAME}"
        exit 1
    fi

    ${MACHINECTL_COMMAND} list
    echo ""
    echo "$0 login ${DST_CONTAINER_NAME}"
    echo ""
        
}

#----------------------------------------------------------
# GOTO MAIN
#----------------------------------------------------------
main ${@}
